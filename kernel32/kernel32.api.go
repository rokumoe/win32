// generated by genapi.go
// GOFILE=kernel32.go GOPACKAGE=kernel32
// DO NOT EDIT!
package kernel32

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer // keep unsafe

var (
	pfnGetProcAddress              uintptr
	pfnCreateIoCompletionPort      uintptr
	pfnGetQueuedCompletionStatusEx uintptr
	pfnSetProcessWorkingSetSize    uintptr
)

func mustload(libname string) syscall.Handle {
	hlib, err := syscall.LoadLibrary(libname)
	if err != nil {
		panic(err)
	}
	return hlib
}

var (
	pfngetprocaddress uintptr
)

func mustfind(hmodule syscall.Handle, procname string) uintptr {
	ptr := uintptr(0)
	if procname[0] == '#' {
		for i := 1; i < len(procname); i++ {
			c := procname[i]
			if c < '0' || c > '9' {
				break
			}
			ptr = ptr*10 + uintptr(c-'0')
		}
	} else {
		ptr = *(*uintptr)(unsafe.Pointer(&procname))
	}
	proc, _, err := syscall.Syscall(pfngetprocaddress, 2,
		uintptr(hmodule),
		ptr,
		0)
	if proc == 0 {
		panic(err)
	}
	return proc
}

func boolcast(b bool) uintptr {
	if b {
		return 1
	}
	return 0
}

func GetProcAddress(module syscall.Handle, procname uintptr) (uintptr, error) {
	r1, _, en := syscall.Syscall(pfnGetProcAddress, 2,
		uintptr(module),
		procname,
		0)
	var err error
	if en != 0 {
		err = en
	}
	return r1, err
}

func CreateIoCompletionPort(filehandle syscall.Handle, completionport syscall.Handle, completionkey uintptr, threadnums uint32) (syscall.Handle, error) {
	r1, _, en := syscall.Syscall6(pfnCreateIoCompletionPort, 4,
		uintptr(filehandle),
		uintptr(completionport),
		completionkey,
		uintptr(threadnums),
		0, 0)
	var err error
	if en != 0 {
		err = en
	}
	return syscall.Handle(r1), err
}

func GetQueuedCompletionStatusEx(completionport syscall.Handle, entries []OVERLAPPED_ENTRY, removed *uint32, timeout uint32, alertable bool) error {
	var (
		pentries1 *OVERLAPPED_ENTRY
		nentries1 = len(entries)
	)
	if nentries1 > 0 {
		pentries1 = &entries[0]
	}
	_, _, en := syscall.Syscall6(pfnGetQueuedCompletionStatusEx, 6,
		uintptr(completionport),
		uintptr(unsafe.Pointer(pentries1)),
		uintptr(nentries1),
		uintptr(unsafe.Pointer(removed)),
		uintptr(timeout),
		boolcast(alertable),
	)
	var err error
	if en != 0 {
		err = en
	}
	return err
}

func SetProcessWorkingSetSize(process syscall.Handle, minimumWorkingSetSize uint, maximumWorkingSetSize uint) error {
	_, _, en := syscall.Syscall(pfnSetProcessWorkingSetSize, 3,
		uintptr(process),
		uintptr(minimumWorkingSetSize),
		uintptr(maximumWorkingSetSize),
	)
	var err error
	if en != 0 {
		err = en
	}
	return err
}

func init() {
	hkernel32 := mustload("kernel32.dll")
	var err error
	pfngetprocaddress, err = syscall.GetProcAddress(hkernel32, "GetProcAddress")
	if err != nil {
		panic(err)
	}
	pfnGetProcAddress = mustfind(hkernel32, "GetProcAddress\000")
	pfnCreateIoCompletionPort = mustfind(hkernel32, "CreateIoCompletionPort\000")
	pfnGetQueuedCompletionStatusEx = mustfind(hkernel32, "GetQueuedCompletionStatusEx\000")
	pfnSetProcessWorkingSetSize = mustfind(hkernel32, "SetProcessWorkingSetSize\000")
}
