// generated by genapi.go
// GOFILE=gdi32.go GOPACKAGE=gdi32
// DO NOT EDIT!
package gdi32

import (
	"syscall"
	"unsafe"
)

var _ unsafe.Pointer // keep unsafe

var (
	pfnBitBlt             uintptr
	pfnDeleteDC           uintptr
	pfnCreateCompatibleDC uintptr
	pfnSelectObject       uintptr
	pfnCreateDIBSection   uintptr
)

func mustload(libname string) syscall.Handle {
	hlib, err := syscall.LoadLibrary(libname)
	if err != nil {
		panic(err)
	}
	return hlib
}

var (
	pfngetprocaddress uintptr
)

func mustfind(hmodule syscall.Handle, procname string) uintptr {
	ptr := uintptr(0)
	if procname[0] == '#' {
		for i := 1; i < len(procname); i++ {
			c := procname[i]
			if c < '0' || c > '9' {
				break
			}
			ptr = ptr*10 + uintptr(c-'0')
		}
	} else {
		ptr = *(*uintptr)(unsafe.Pointer(&procname))
	}
	proc, _, err := syscall.Syscall(pfngetprocaddress, 2,
		uintptr(hmodule),
		ptr,
		0)
	if proc == 0 {
		panic(err)
	}
	return proc
}

func boolcast(b bool) uintptr {
	if b {
		return 1
	}
	return 0
}

func BitBlt(hdc syscall.Handle, x int, y int, cx int, cy int, hdcSrc syscall.Handle, x1 int, y1 int, rop uint32) {
	syscall.Syscall9(pfnBitBlt, 9,
		uintptr(hdc),
		uintptr(x),
		uintptr(y),
		uintptr(cx),
		uintptr(cy),
		uintptr(hdcSrc),
		uintptr(x1),
		uintptr(y1),
		uintptr(rop),
	)
}

func DeleteDC(hdc syscall.Handle) {
	syscall.Syscall(pfnDeleteDC, 1,
		uintptr(hdc),
		0, 0)
}

func CreateCompatibleDC(hdc syscall.Handle) syscall.Handle {
	r1, _, _ := syscall.Syscall(pfnCreateCompatibleDC, 1,
		uintptr(hdc),
		0, 0)
	return syscall.Handle(r1)
}

func SelectObject(hdc syscall.Handle, hgdiobj syscall.Handle) syscall.Handle {
	r1, _, _ := syscall.Syscall(pfnSelectObject, 2,
		uintptr(hdc),
		uintptr(hgdiobj),
		0)
	return syscall.Handle(r1)
}

func CreateDIBSection(hdc syscall.Handle, bmi *BITMAPINFO, usage uint32, ppvBits unsafe.Pointer, section syscall.Handle, offset uint32) syscall.Handle {
	r1, _, _ := syscall.Syscall6(pfnCreateDIBSection, 6,
		uintptr(hdc),
		uintptr(unsafe.Pointer(bmi)),
		uintptr(usage),
		uintptr(ppvBits),
		uintptr(section),
		uintptr(offset),
	)
	return syscall.Handle(r1)
}

func init() {
	hkernel32 := mustload("kernel32.dll")
	var err error
	pfngetprocaddress, err = syscall.GetProcAddress(hkernel32, "GetProcAddress")
	if err != nil {
		panic(err)
	}
	hgdi32 := mustload("gdi32.dll")
	_ = hgdi32
	pfnBitBlt = mustfind(hgdi32, "BitBlt\000")
	pfnDeleteDC = mustfind(hgdi32, "DeleteDC\000")
	pfnCreateCompatibleDC = mustfind(hgdi32, "CreateCompatibleDC\000")
	pfnSelectObject = mustfind(hgdi32, "SelectObject\000")
	pfnCreateDIBSection = mustfind(hgdi32, "CreateDIBSection\000")
}
